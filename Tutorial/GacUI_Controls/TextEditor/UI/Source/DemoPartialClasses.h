/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
GacUI::Partial Classes

This file is generated by: Vczh GacUI Resource Code Generator
************************************************************************
DO NOT MODIFY
***********************************************************************/

#ifndef VCZH_GACUI_RESOURCE_CODE_GENERATOR_Demo_PARTIAL_CLASSES
#define VCZH_GACUI_RESOURCE_CODE_GENERATOR_Demo_PARTIAL_CLASSES

#include "GacUIReflection.h"

namespace vm
{
	class IFindWindowViewModel;
}
namespace demo
{
	class AboutWindow;
	class FindWindow;
	class MainWindow;

}
namespace vm
{
	class IFindWindowViewModel : public virtual ::vl::reflection::IDescriptable, public vl::reflection::Description<IFindWindowViewModel>
	{
	public:
		virtual bool FindNext(::vl::WString toFind, bool caseSensitive, bool down) = 0;
	};

}
namespace demo
{
	template<typename TImpl>
	class AboutWindow_ : public ::vl::presentation::controls::GuiWindow, public vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		::vl::presentation::controls::GuiDocumentLabel* documentLabel;
		::vl::presentation::controls::GuiWindow* self;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(documentLabel);
				GUI_INSTANCE_REFERENCE(self);
			}
			else
			{
			}
		}
	public:
		AboutWindow_()
			:vl::presentation::GuiInstancePartialClass<::vl::presentation::controls::GuiWindow>(L"demo::AboutWindow")
			,::vl::presentation::controls::GuiWindow(vl::presentation::theme::GetCurrentTheme()->CreateWindowStyle())
			,documentLabel(0)
			,self(0)
		{
		}
	};

	template<typename TImpl>
	class FindWindow_ : public ::vl::presentation::controls::GuiWindow, public vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
		vl::Ptr<vm::IFindWindowViewModel> ViewModel_;
	protected:
		::vl::presentation::controls::GuiSelectableButton* checkCase;
		::vl::presentation::controls::GuiMessageDialog* dialogContentNotFound;
		::vl::presentation::controls::GuiSelectableButton::MutexGroupController* groupDirection;
		::vl::presentation::controls::GuiSelectableButton* radioDown;
		::vl::presentation::controls::GuiSelectableButton* radioUp;
		::vl::presentation::controls::GuiWindow* self;
		::vl::presentation::controls::GuiSinglelineTextBox* textFind;

		void InitializeComponents(vl::Ptr<vm::IFindWindowViewModel> ViewModel)
		{
			ViewModel_ = ViewModel;
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(checkCase);
				GUI_INSTANCE_REFERENCE(dialogContentNotFound);
				GUI_INSTANCE_REFERENCE(groupDirection);
				GUI_INSTANCE_REFERENCE(radioDown);
				GUI_INSTANCE_REFERENCE(radioUp);
				GUI_INSTANCE_REFERENCE(self);
				GUI_INSTANCE_REFERENCE(textFind);
			}
			else
			{
				ViewModel_ = 0;
			}
		}
	public:
		FindWindow_()
			:vl::presentation::GuiInstancePartialClass<::vl::presentation::controls::GuiWindow>(L"demo::FindWindow")
			,::vl::presentation::controls::GuiWindow(vl::presentation::theme::GetCurrentTheme()->CreateWindowStyle())
			,checkCase(0)
			,dialogContentNotFound(0)
			,groupDirection(0)
			,radioDown(0)
			,radioUp(0)
			,self(0)
			,textFind(0)
		{
		}

		vl::Ptr<vm::IFindWindowViewModel> GetViewModel()
		{
			return ViewModel_;
		}
	};

	template<typename TImpl>
	class MainWindow_ : public ::vl::presentation::controls::GuiWindow, public vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
	protected:
		::vl::presentation::controls::GuiToolstripCommand* commandAbout;
		::vl::presentation::controls::GuiToolstripCommand* commandEditCopy;
		::vl::presentation::controls::GuiToolstripCommand* commandEditCut;
		::vl::presentation::controls::GuiToolstripCommand* commandEditDelete;
		::vl::presentation::controls::GuiToolstripCommand* commandEditFind;
		::vl::presentation::controls::GuiToolstripCommand* commandEditPaste;
		::vl::presentation::controls::GuiToolstripCommand* commandEditRedo;
		::vl::presentation::controls::GuiToolstripCommand* commandEditSelect;
		::vl::presentation::controls::GuiToolstripCommand* commandEditUndo;
		::vl::presentation::controls::GuiToolstripCommand* commandFileExit;
		::vl::presentation::controls::GuiToolstripCommand* commandFileNewText;
		::vl::presentation::controls::GuiToolstripCommand* commandFileNewXml;
		::vl::presentation::controls::GuiToolstripCommand* commandFileOpen;
		::vl::presentation::controls::GuiToolstripCommand* commandFileOpenText;
		::vl::presentation::controls::GuiToolstripCommand* commandFileOpenXml;
		::vl::presentation::controls::GuiToolstripCommand* commandFileSave;
		::vl::presentation::controls::GuiToolstripCommand* commandFileSaveAs;
		::vl::presentation::controls::GuiMessageDialog* dialogCannotOpen;
		::vl::presentation::controls::GuiMessageDialog* dialogCannotSave;
		::vl::presentation::controls::GuiOpenFileDialog* dialogOpen;
		::vl::presentation::controls::GuiMessageDialog* dialogQueryClose;
		::vl::presentation::controls::GuiSaveFileDialog* dialogSave;
		::vl::presentation::controls::GuiWindow* self;
		::vl::presentation::controls::GuiMultilineTextBox* textBox;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(commandAbout);
				GUI_INSTANCE_REFERENCE(commandEditCopy);
				GUI_INSTANCE_REFERENCE(commandEditCut);
				GUI_INSTANCE_REFERENCE(commandEditDelete);
				GUI_INSTANCE_REFERENCE(commandEditFind);
				GUI_INSTANCE_REFERENCE(commandEditPaste);
				GUI_INSTANCE_REFERENCE(commandEditRedo);
				GUI_INSTANCE_REFERENCE(commandEditSelect);
				GUI_INSTANCE_REFERENCE(commandEditUndo);
				GUI_INSTANCE_REFERENCE(commandFileExit);
				GUI_INSTANCE_REFERENCE(commandFileNewText);
				GUI_INSTANCE_REFERENCE(commandFileNewXml);
				GUI_INSTANCE_REFERENCE(commandFileOpen);
				GUI_INSTANCE_REFERENCE(commandFileOpenText);
				GUI_INSTANCE_REFERENCE(commandFileOpenXml);
				GUI_INSTANCE_REFERENCE(commandFileSave);
				GUI_INSTANCE_REFERENCE(commandFileSaveAs);
				GUI_INSTANCE_REFERENCE(dialogCannotOpen);
				GUI_INSTANCE_REFERENCE(dialogCannotSave);
				GUI_INSTANCE_REFERENCE(dialogOpen);
				GUI_INSTANCE_REFERENCE(dialogQueryClose);
				GUI_INSTANCE_REFERENCE(dialogSave);
				GUI_INSTANCE_REFERENCE(self);
				GUI_INSTANCE_REFERENCE(textBox);
			}
			else
			{
			}
		}
	public:
		MainWindow_()
			:vl::presentation::GuiInstancePartialClass<::vl::presentation::controls::GuiWindow>(L"demo::MainWindow")
			,::vl::presentation::controls::GuiWindow(vl::presentation::theme::GetCurrentTheme()->CreateWindowStyle())
			,commandAbout(0)
			,commandEditCopy(0)
			,commandEditCut(0)
			,commandEditDelete(0)
			,commandEditFind(0)
			,commandEditPaste(0)
			,commandEditRedo(0)
			,commandEditSelect(0)
			,commandEditUndo(0)
			,commandFileExit(0)
			,commandFileNewText(0)
			,commandFileNewXml(0)
			,commandFileOpen(0)
			,commandFileOpenText(0)
			,commandFileOpenXml(0)
			,commandFileSave(0)
			,commandFileSaveAs(0)
			,dialogCannotOpen(0)
			,dialogCannotSave(0)
			,dialogOpen(0)
			,dialogQueryClose(0)
			,dialogSave(0)
			,self(0)
			,textBox(0)
		{
		}
	};

}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
			DECL_TYPE_INFO(vm::IFindWindowViewModel)
			DECL_TYPE_INFO(demo::AboutWindow)
			DECL_TYPE_INFO(demo::FindWindow)
			DECL_TYPE_INFO(demo::MainWindow)

		}
	}
}
namespace demo
{
	class FindWindow : public demo::FindWindow_<demo::FindWindow>
	{
		friend class demo::FindWindow_<demo::FindWindow>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<demo::FindWindow>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		void OnCreate();
		void OnDestroy();
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		FindWindow(vl::Ptr<vm::IFindWindowViewModel> ViewModel);
		~FindWindow();
	};
}



#endif
