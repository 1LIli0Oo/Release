/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
GacUI::MainWindow

This file is generated by: Vczh GacUI Resource Code Generator
***********************************************************************/

#include "Demo.h"

using namespace vl::stream;

namespace demo
{
	// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)

	void MainWindow::commandAbout_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	void MainWindow::commandEditCopy_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
		textBox->Copy();
	}

	void MainWindow::commandEditCut_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
		textBox->Cut();
	}

	void MainWindow::commandEditDelete_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
		textBox->SetSelectionText(L"");
	}

	void MainWindow::commandEditFind_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
	}

	void MainWindow::commandEditPaste_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
		textBox->Paste();
	}

	void MainWindow::commandEditRedo_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
		textBox->Redo();
	}

	void MainWindow::commandEditSelect_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
		textBox->SelectAll();
	}

	void MainWindow::commandEditUndo_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
		textBox->Undo();
	}

	void MainWindow::commandFileExit_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
		if (CanCloseFile())
		{
			Close();
		}
	}

	void MainWindow::commandFileNewText_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
		if (CanCloseFile())
		{
			textBox->SetText(L"");
			textBox->ClearUndoRedo();
			SetupTextConfig();
		}
	}

	void MainWindow::commandFileNewXml_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
		if (CanCloseFile())
		{
			textBox->SetText(L"");
			textBox->ClearUndoRedo();
			SetupXmlConfig();
		}
	}

	void MainWindow::commandFileOpenText_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
		OpenFile(0);
	}

	void MainWindow::commandFileOpenXml_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
		OpenFile(1);
	}

	void MainWindow::commandFileOpen_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
		OpenFile(dialogOpen->GetFilterIndex());
	}

	void MainWindow::commandFileSaveAs_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
		SaveFile(true);
	}

	void MainWindow::commandFileSave_Executed(GuiGraphicsComposition* sender, vl::presentation::compositions::GuiEventArgs& arguments)
	{
		SaveFile(false);
	}

	// #endregion CLASS_MEMBER_GUIEVENT_HANDLER

	bool MainWindow::CanCloseFile()
	{
		return true;
	}

	void MainWindow::OpenFile(vint filterIndex)
	{
		if (CanCloseFile())
		{
			dialogOpen->SetFilterIndex(filterIndex);
			if (dialogOpen->ShowDialog())
			{
				FileStream fileStream(dialogOpen->GetFileName(), FileStream::ReadOnly);
				if (fileStream.IsAvailable())
				{
					BomDecoder decoder;
					DecoderStream decoderStream(fileStream, decoder);
					StreamReader reader(decoderStream);
					textBox->SetText(reader.ReadToEnd());
					textBox->Select(TextPos(), TextPos());
					textBox->SetFocus();
					textBox->ClearUndoRedo();
					if (dialogOpen->GetFilterIndex() == 1)
					{
						SetupXmlConfig();
					}
					else
					{
						SetupTextConfig();
					}
					fileName = dialogOpen->GetFileName();
				}
				else
				{
					dialogCannotOpen->ShowDialog();
				}
			}
		}
	}

	void MainWindow::SaveFile(bool saveAs)
	{
		if (saveAs || fileName == L"")
		{
			dialogSave->SetFilterIndex(isXml ? 1 : 0);
			if (dialogSave->ShowDialog())
			{
				fileName = dialogSave->GetFileName();
			}
			else
			{
				return;
			}
		}

		FileStream fileStream(fileName, FileStream::WriteOnly);
		if (fileStream.IsAvailable())
		{
			BomEncoder encoder(BomEncoder::Utf16);
			EncoderStream encoderStream(fileStream, encoder);
			StreamWriter writer(encoderStream);
			writer.WriteString(textBox->GetText());
			textBox->NotifyModificationSaved();

		}
		else
		{
			dialogCannotSave->ShowDialog();
		}
	}

	void MainWindow::SetupTextConfig()
	{
		isXml = false;
	}

	void MainWindow::SetupXmlConfig()
	{
		isXml = true;
	}

	MainWindow::MainWindow()
	{
		InitializeComponents();
	}

	MainWindow::~MainWindow()
	{
		ClearSubscriptions();
	}
}
