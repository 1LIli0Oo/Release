/***********************************************************************
Vczh Library++ 3.0
Developer: Zihan Chen(vczh)
GacUI::Partial Classes

This file is generated by: Vczh GacUI Resource Code Generator
************************************************************************
DO NOT MODIFY
***********************************************************************/

#ifndef VCZH_GACUI_RESOURCE_CODE_GENERATOR_Demo_PARTIAL_CLASSES
#define VCZH_GACUI_RESOURCE_CODE_GENERATOR_Demo_PARTIAL_CLASSES

#include "GacUIReflection.h"

namespace demo
{
	class IContact;
	class ICategory;
	class IViewModel;
	class MainWindow;
	class NewContactWindow;
	class NewFolderWindow;

	class IContact : public virtual ::vl::reflection::IDescriptable, public vl::reflection::Description<IContact>
	{
	public:
		virtual ::vl::WString GetName() = 0;
		virtual vl::Ptr<::vl::presentation::GuiImageData> GetBigImage() = 0;
		virtual vl::Ptr<::vl::presentation::GuiImageData> GetSmallImage() = 0;
		virtual ::vl::DateTime GetBirthday() = 0;
		virtual ::vl::WString GetBirthdayText() = 0;
		virtual ::vl::WString GetPhone() = 0;
		virtual ::vl::WString GetAddress() = 0;
		virtual void Update(::vl::WString name, ::vl::DateTime birthday, ::vl::WString phone, ::vl::WString address) = 0;
	};

	class ICategory : public virtual ::vl::reflection::IDescriptable, public vl::reflection::Description<ICategory>
	{
	public:
		virtual ::demo::ICategory* GetParent() = 0;
		virtual ::vl::WString GetName() = 0;
		virtual vl::Ptr<::vl::presentation::GuiImageData> GetImage() = 0;
		virtual vl::Ptr<::vl::reflection::description::IValueObservableList> GetFolders() = 0;
		virtual vl::Ptr<::vl::reflection::description::IValueObservableList> GetContacts() = 0;
	};

	class IViewModel : public virtual ::vl::reflection::IDescriptable, public vl::reflection::Description<IViewModel>
	{
	public:
		virtual vl::Ptr<::demo::ICategory> GetRootCategory() = 0;
		virtual vl::Ptr<::demo::ICategory> GetSelectedCategory() = 0;
		virtual void SetSelectedCategory(vl::Ptr<::demo::ICategory> value) = 0;
		vl::Event<void()> SelectedCategoryChanged;
		virtual vl::Ptr<::demo::IContact> GetSelectedContact() = 0;
		virtual void SetSelectedContact(vl::Ptr<::demo::IContact> value) = 0;
		vl::Event<void()> SelectedContactChanged;
		virtual void AddCategory(::vl::WString name) = 0;
		virtual void RemoveCategory() = 0;
		virtual vl::Ptr<::demo::IContact> CreateContact() = 0;
		virtual void AddContact(vl::Ptr<::demo::IContact> contact) = 0;
		virtual void RemoveContact() = 0;
	};

	template<typename TImpl>
	class MainWindow_ : public ::vl::presentation::controls::GuiWindow, public vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
		Ptr<demo::IViewModel> ViewModel_;
	protected:
		::vl::presentation::controls::GuiToolstripCommand* commandBigIcon;
		::vl::presentation::controls::GuiToolstripCommand* commandDeleteContact;
		::vl::presentation::controls::GuiToolstripCommand* commandDeleteFolder;
		::vl::presentation::controls::GuiToolstripCommand* commandDetail;
		::vl::presentation::controls::GuiToolstripCommand* commandEditContact;
		::vl::presentation::controls::GuiToolstripCommand* commandInformation;
		::vl::presentation::controls::GuiToolstripCommand* commandList;
		::vl::presentation::controls::GuiToolstripCommand* commandNewContact;
		::vl::presentation::controls::GuiToolstripCommand* commandNewFolder;
		::vl::presentation::controls::GuiToolstripCommand* commandSmallIcon;
		::vl::presentation::controls::GuiToolstripCommand* commandTile;
		::vl::presentation::controls::GuiBindableListView* listViewContacts;
		::vl::presentation::controls::GuiWindow* self;
		::vl::presentation::controls::GuiBindableTreeView* treeViewFolders;

		void InitializeComponents(Ptr<demo::IViewModel> ViewModel)
		{
			ViewModel_ = ViewModel;
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(commandBigIcon);
				GUI_INSTANCE_REFERENCE(commandDeleteContact);
				GUI_INSTANCE_REFERENCE(commandDeleteFolder);
				GUI_INSTANCE_REFERENCE(commandDetail);
				GUI_INSTANCE_REFERENCE(commandEditContact);
				GUI_INSTANCE_REFERENCE(commandInformation);
				GUI_INSTANCE_REFERENCE(commandList);
				GUI_INSTANCE_REFERENCE(commandNewContact);
				GUI_INSTANCE_REFERENCE(commandNewFolder);
				GUI_INSTANCE_REFERENCE(commandSmallIcon);
				GUI_INSTANCE_REFERENCE(commandTile);
				GUI_INSTANCE_REFERENCE(listViewContacts);
				GUI_INSTANCE_REFERENCE(self);
				GUI_INSTANCE_REFERENCE(treeViewFolders);
			}
			else
			{
				ViewModel_ = 0;
			}
		}
	public:
		MainWindow_()
			:vl::presentation::GuiInstancePartialClass<::vl::presentation::controls::GuiWindow>(L"demo::MainWindow")
			,::vl::presentation::controls::GuiWindow(vl::presentation::theme::GetCurrentTheme()->CreateWindowStyle())
			,commandBigIcon(0)
			,commandDeleteContact(0)
			,commandDeleteFolder(0)
			,commandDetail(0)
			,commandEditContact(0)
			,commandInformation(0)
			,commandList(0)
			,commandNewContact(0)
			,commandNewFolder(0)
			,commandSmallIcon(0)
			,commandTile(0)
			,listViewContacts(0)
			,self(0)
			,treeViewFolders(0)
		{
		}

		Ptr<demo::IViewModel> GetViewModel()
		{
			return ViewModel_;
		}
	};

	template<typename TImpl>
	class NewContactWindow_ : public ::vl::presentation::controls::GuiWindow, public vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
		Ptr<demo::IContact> Contact_;
		bool ForEdit_;
		bool Ready_;
	protected:
		::vl::presentation::controls::GuiDatePicker* datePickerBirthday;
		::vl::presentation::controls::GuiWindow* self;
		::vl::presentation::controls::GuiDocumentLabel* textBoxAddress;
		::vl::presentation::controls::GuiDocumentLabel* textBoxName;
		::vl::presentation::controls::GuiDocumentLabel* textBoxPhone;

		void InitializeComponents(Ptr<demo::IContact> Contact)
		{
			Contact_ = Contact;
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(datePickerBirthday);
				GUI_INSTANCE_REFERENCE(self);
				GUI_INSTANCE_REFERENCE(textBoxAddress);
				GUI_INSTANCE_REFERENCE(textBoxName);
				GUI_INSTANCE_REFERENCE(textBoxPhone);
			}
			else
			{
				Contact_ = 0;
			}
		}
	public:
		NewContactWindow_()
			:vl::presentation::GuiInstancePartialClass<::vl::presentation::controls::GuiWindow>(L"demo::NewContactWindow")
			,::vl::presentation::controls::GuiWindow(vl::presentation::theme::GetCurrentTheme()->CreateWindowStyle())
			,datePickerBirthday(0)
			,self(0)
			,textBoxAddress(0)
			,textBoxName(0)
			,textBoxPhone(0)
		{
			this->ForEdit = vl::reflection::description::UnboxValue<bool>(
			[]()
			{
				vl::reflection::description::Value value;
				reflection::description::GetTypeDescriptor<bool>()->GetSerializableType()->Deserialize(L"false", value);
				return value;
			}());
			this->Ready = vl::reflection::description::UnboxValue<bool>(
			[]()
			{
				vl::reflection::description::Value value;
				reflection::description::GetTypeDescriptor<bool>()->GetSerializableType()->Deserialize(L"true", value);
				return value;
			}());
		}

		Ptr<demo::IContact> GetContact()
		{
			return Contact_;
		}

		vl::Event<void()> ForEditChanged;

		bool GetForEdit()
		{
			return ForEdit_;
		}

		void SetForEdit(bool value)
		{
			ForEdit_ = value;
			ForEditChanged();
		}

		vl::Event<void()> ReadyChanged;

		bool GetReady()
		{
			return Ready_;
		}

		void SetReady(bool value)
		{
			Ready_ = value;
			ReadyChanged();
		}
	};

	template<typename TImpl>
	class NewFolderWindow_ : public ::vl::presentation::controls::GuiWindow, public vl::presentation::GuiInstancePartialClass<vl::presentation::controls::GuiWindow>, public vl::reflection::Description<TImpl>
	{
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<TImpl>;
	private:
		::vl::WString FolderName_;
		bool Ready_;
	protected:
		::vl::presentation::controls::GuiWindow* self;
		::vl::presentation::controls::GuiDocumentLabel* textBoxName;

		void InitializeComponents()
		{
			if (InitializeFromResource())
			{
				GUI_INSTANCE_REFERENCE(self);
				GUI_INSTANCE_REFERENCE(textBoxName);
			}
			else
			{
			}
		}
	public:
		NewFolderWindow_()
			:vl::presentation::GuiInstancePartialClass<::vl::presentation::controls::GuiWindow>(L"demo::NewFolderWindow")
			,::vl::presentation::controls::GuiWindow(vl::presentation::theme::GetCurrentTheme()->CreateWindowStyle())
			,self(0)
			,textBoxName(0)
		{
			this->FolderName = vl::reflection::description::UnboxValue<::vl::WString>(
			[]()
			{
				vl::reflection::description::Value value;
				reflection::description::GetTypeDescriptor<::vl::WString>()->GetSerializableType()->Deserialize(L"", value);
				return value;
			}());
			this->Ready = vl::reflection::description::UnboxValue<bool>(
			[]()
			{
				vl::reflection::description::Value value;
				reflection::description::GetTypeDescriptor<bool>()->GetSerializableType()->Deserialize(L"true", value);
				return value;
			}());
		}

		vl::Event<void()> FolderNameChanged;

		::vl::WString GetFolderName()
		{
			return FolderName_;
		}

		void SetFolderName(::vl::WString value)
		{
			FolderName_ = value;
			FolderNameChanged();
		}

		vl::Event<void()> ReadyChanged;

		bool GetReady()
		{
			return Ready_;
		}

		void SetReady(bool value)
		{
			Ready_ = value;
			ReadyChanged();
		}
	};

}
namespace vl
{
	namespace reflection
	{
		namespace description
		{
			DECL_TYPE_INFO(demo::ICategory)
			DECL_TYPE_INFO(demo::IContact)
			DECL_TYPE_INFO(demo::IViewModel)
			DECL_TYPE_INFO(demo::MainWindow)
			DECL_TYPE_INFO(demo::NewContactWindow)
			DECL_TYPE_INFO(demo::NewFolderWindow)

		}
	}
}
namespace demo
{
	class NewContactWindow : public demo::NewContactWindow_<demo::NewContactWindow>
	{
		friend class demo::NewContactWindow_<demo::NewContactWindow>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<demo::NewContactWindow>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		void OnCreate();
		void OnDestroy();
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		NewContactWindow(Ptr<demo::IContact> Contact);
		~NewContactWindow();
	};
}


namespace demo
{
	class NewFolderWindow : public demo::NewFolderWindow_<demo::NewFolderWindow>
	{
		friend class demo::NewFolderWindow_<demo::NewFolderWindow>;
		friend struct vl::reflection::description::CustomTypeDescriptorSelector<demo::NewFolderWindow>;
	protected:

		// #region CLASS_MEMBER_GUIEVENT_HANDLER (DO NOT PUT OTHER CONTENT IN THIS #region.)
		void OnCreate();
		void OnDestroy();
		// #endregion CLASS_MEMBER_GUIEVENT_HANDLER
	public:
		NewFolderWindow();
		~NewFolderWindow();
	};
}



#endif
